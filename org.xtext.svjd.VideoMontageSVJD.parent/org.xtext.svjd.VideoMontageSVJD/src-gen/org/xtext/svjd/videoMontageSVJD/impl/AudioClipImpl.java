/**
 * generated by Xtext 2.24.0
 */
package org.xtext.svjd.videoMontageSVJD.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.svjd.videoMontageSVJD.Audio;
import org.xtext.svjd.videoMontageSVJD.AudioClip;
import org.xtext.svjd.videoMontageSVJD.StartingMoment;
import org.xtext.svjd.videoMontageSVJD.VideoMontageSVJDPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Audio Clip</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.svjd.videoMontageSVJD.impl.AudioClipImpl#getStartingmoment <em>Startingmoment</em>}</li>
 *   <li>{@link org.xtext.svjd.videoMontageSVJD.impl.AudioClipImpl#getVolume <em>Volume</em>}</li>
 *   <li>{@link org.xtext.svjd.videoMontageSVJD.impl.AudioClipImpl#getStartCut <em>Start Cut</em>}</li>
 *   <li>{@link org.xtext.svjd.videoMontageSVJD.impl.AudioClipImpl#getEndCut <em>End Cut</em>}</li>
 *   <li>{@link org.xtext.svjd.videoMontageSVJD.impl.AudioClipImpl#getAudio <em>Audio</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AudioClipImpl extends AudioElementImpl implements AudioClip
{
  /**
   * The cached value of the '{@link #getStartingmoment() <em>Startingmoment</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartingmoment()
   * @generated
   * @ordered
   */
  protected StartingMoment startingmoment;

  /**
   * The default value of the '{@link #getVolume() <em>Volume</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVolume()
   * @generated
   * @ordered
   */
  protected static final double VOLUME_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getVolume() <em>Volume</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVolume()
   * @generated
   * @ordered
   */
  protected double volume = VOLUME_EDEFAULT;

  /**
   * The default value of the '{@link #getStartCut() <em>Start Cut</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartCut()
   * @generated
   * @ordered
   */
  protected static final double START_CUT_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getStartCut() <em>Start Cut</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartCut()
   * @generated
   * @ordered
   */
  protected double startCut = START_CUT_EDEFAULT;

  /**
   * The default value of the '{@link #getEndCut() <em>End Cut</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndCut()
   * @generated
   * @ordered
   */
  protected static final double END_CUT_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getEndCut() <em>End Cut</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndCut()
   * @generated
   * @ordered
   */
  protected double endCut = END_CUT_EDEFAULT;

  /**
   * The cached value of the '{@link #getAudio() <em>Audio</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAudio()
   * @generated
   * @ordered
   */
  protected EList<Audio> audio;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AudioClipImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return VideoMontageSVJDPackage.Literals.AUDIO_CLIP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartingMoment getStartingmoment()
  {
    return startingmoment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStartingmoment(StartingMoment newStartingmoment, NotificationChain msgs)
  {
    StartingMoment oldStartingmoment = startingmoment;
    startingmoment = newStartingmoment;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VideoMontageSVJDPackage.AUDIO_CLIP__STARTINGMOMENT, oldStartingmoment, newStartingmoment);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartingmoment(StartingMoment newStartingmoment)
  {
    if (newStartingmoment != startingmoment)
    {
      NotificationChain msgs = null;
      if (startingmoment != null)
        msgs = ((InternalEObject)startingmoment).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VideoMontageSVJDPackage.AUDIO_CLIP__STARTINGMOMENT, null, msgs);
      if (newStartingmoment != null)
        msgs = ((InternalEObject)newStartingmoment).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VideoMontageSVJDPackage.AUDIO_CLIP__STARTINGMOMENT, null, msgs);
      msgs = basicSetStartingmoment(newStartingmoment, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VideoMontageSVJDPackage.AUDIO_CLIP__STARTINGMOMENT, newStartingmoment, newStartingmoment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getVolume()
  {
    return volume;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVolume(double newVolume)
  {
    double oldVolume = volume;
    volume = newVolume;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VideoMontageSVJDPackage.AUDIO_CLIP__VOLUME, oldVolume, volume));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getStartCut()
  {
    return startCut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartCut(double newStartCut)
  {
    double oldStartCut = startCut;
    startCut = newStartCut;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VideoMontageSVJDPackage.AUDIO_CLIP__START_CUT, oldStartCut, startCut));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getEndCut()
  {
    return endCut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEndCut(double newEndCut)
  {
    double oldEndCut = endCut;
    endCut = newEndCut;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VideoMontageSVJDPackage.AUDIO_CLIP__END_CUT, oldEndCut, endCut));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Audio> getAudio()
  {
    if (audio == null)
    {
      audio = new EObjectResolvingEList<Audio>(Audio.class, this, VideoMontageSVJDPackage.AUDIO_CLIP__AUDIO);
    }
    return audio;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case VideoMontageSVJDPackage.AUDIO_CLIP__STARTINGMOMENT:
        return basicSetStartingmoment(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case VideoMontageSVJDPackage.AUDIO_CLIP__STARTINGMOMENT:
        return getStartingmoment();
      case VideoMontageSVJDPackage.AUDIO_CLIP__VOLUME:
        return getVolume();
      case VideoMontageSVJDPackage.AUDIO_CLIP__START_CUT:
        return getStartCut();
      case VideoMontageSVJDPackage.AUDIO_CLIP__END_CUT:
        return getEndCut();
      case VideoMontageSVJDPackage.AUDIO_CLIP__AUDIO:
        return getAudio();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case VideoMontageSVJDPackage.AUDIO_CLIP__STARTINGMOMENT:
        setStartingmoment((StartingMoment)newValue);
        return;
      case VideoMontageSVJDPackage.AUDIO_CLIP__VOLUME:
        setVolume((Double)newValue);
        return;
      case VideoMontageSVJDPackage.AUDIO_CLIP__START_CUT:
        setStartCut((Double)newValue);
        return;
      case VideoMontageSVJDPackage.AUDIO_CLIP__END_CUT:
        setEndCut((Double)newValue);
        return;
      case VideoMontageSVJDPackage.AUDIO_CLIP__AUDIO:
        getAudio().clear();
        getAudio().addAll((Collection<? extends Audio>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case VideoMontageSVJDPackage.AUDIO_CLIP__STARTINGMOMENT:
        setStartingmoment((StartingMoment)null);
        return;
      case VideoMontageSVJDPackage.AUDIO_CLIP__VOLUME:
        setVolume(VOLUME_EDEFAULT);
        return;
      case VideoMontageSVJDPackage.AUDIO_CLIP__START_CUT:
        setStartCut(START_CUT_EDEFAULT);
        return;
      case VideoMontageSVJDPackage.AUDIO_CLIP__END_CUT:
        setEndCut(END_CUT_EDEFAULT);
        return;
      case VideoMontageSVJDPackage.AUDIO_CLIP__AUDIO:
        getAudio().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case VideoMontageSVJDPackage.AUDIO_CLIP__STARTINGMOMENT:
        return startingmoment != null;
      case VideoMontageSVJDPackage.AUDIO_CLIP__VOLUME:
        return volume != VOLUME_EDEFAULT;
      case VideoMontageSVJDPackage.AUDIO_CLIP__START_CUT:
        return startCut != START_CUT_EDEFAULT;
      case VideoMontageSVJDPackage.AUDIO_CLIP__END_CUT:
        return endCut != END_CUT_EDEFAULT;
      case VideoMontageSVJDPackage.AUDIO_CLIP__AUDIO:
        return audio != null && !audio.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (volume: ");
    result.append(volume);
    result.append(", startCut: ");
    result.append(startCut);
    result.append(", endCut: ");
    result.append(endCut);
    result.append(')');
    return result.toString();
  }

} //AudioClipImpl
