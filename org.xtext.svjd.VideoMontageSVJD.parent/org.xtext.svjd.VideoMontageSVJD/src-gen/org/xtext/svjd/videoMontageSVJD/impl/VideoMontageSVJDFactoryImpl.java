/**
 * generated by Xtext 2.24.0
 */
package org.xtext.svjd.videoMontageSVJD.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.svjd.videoMontageSVJD.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class VideoMontageSVJDFactoryImpl extends EFactoryImpl implements VideoMontageSVJDFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static VideoMontageSVJDFactory init()
  {
    try
    {
      VideoMontageSVJDFactory theVideoMontageSVJDFactory = (VideoMontageSVJDFactory)EPackage.Registry.INSTANCE.getEFactory(VideoMontageSVJDPackage.eNS_URI);
      if (theVideoMontageSVJDFactory != null)
      {
        return theVideoMontageSVJDFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new VideoMontageSVJDFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VideoMontageSVJDFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case VideoMontageSVJDPackage.MOVIE: return createMovie();
      case VideoMontageSVJDPackage.ELEMENT: return createElement();
      case VideoMontageSVJDPackage.AUDIO_ELEMENT: return createAudioElement();
      case VideoMontageSVJDPackage.VIDEO_ELEMENT: return createVideoElement();
      case VideoMontageSVJDPackage.VIDEO_TIME_LINE: return createVideoTimeLine();
      case VideoMontageSVJDPackage.TEXT_AREA: return createTextArea();
      case VideoMontageSVJDPackage.STARTING_MOMENT: return createStartingMoment();
      case VideoMontageSVJDPackage.ANIMATION: return createAnimation();
      case VideoMontageSVJDPackage.SUBTITLE: return createSubtitle();
      case VideoMontageSVJDPackage.AUDIO: return createAudio();
      case VideoMontageSVJDPackage.AUDIO_CLIP: return createAudioClip();
      case VideoMontageSVJDPackage.CLIP: return createClip();
      case VideoMontageSVJDPackage.TITLE: return createTitle();
      case VideoMontageSVJDPackage.VIDEO: return createVideo();
      case VideoMontageSVJDPackage.RELATIVE_MOMENT: return createRelativeMoment();
      case VideoMontageSVJDPackage.ABSOLUTE_MOMENT: return createAbsoluteMoment();
      case VideoMontageSVJDPackage.TRANSITION: return createTransition();
      case VideoMontageSVJDPackage.FONT: return createFont();
      case VideoMontageSVJDPackage.TEXT_AREA_DYNAMIC: return createTextAreaDynamic();
      case VideoMontageSVJDPackage.FADE_IN: return createFadeIn();
      case VideoMontageSVJDPackage.FADE_OUT: return createFadeOut();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case VideoMontageSVJDPackage.OPERATION_MOMENT:
        return createOperationMomentFromString(eDataType, initialValue);
      case VideoMontageSVJDPackage.MOMENT:
        return createMomentFromString(eDataType, initialValue);
      case VideoMontageSVJDPackage.COLOR:
        return createColorFromString(eDataType, initialValue);
      case VideoMontageSVJDPackage.FONT_STYLE:
        return createFontStyleFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case VideoMontageSVJDPackage.OPERATION_MOMENT:
        return convertOperationMomentToString(eDataType, instanceValue);
      case VideoMontageSVJDPackage.MOMENT:
        return convertMomentToString(eDataType, instanceValue);
      case VideoMontageSVJDPackage.COLOR:
        return convertColorToString(eDataType, instanceValue);
      case VideoMontageSVJDPackage.FONT_STYLE:
        return convertFontStyleToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Movie createMovie()
  {
    MovieImpl movie = new MovieImpl();
    return movie;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AudioElement createAudioElement()
  {
    AudioElementImpl audioElement = new AudioElementImpl();
    return audioElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VideoElement createVideoElement()
  {
    VideoElementImpl videoElement = new VideoElementImpl();
    return videoElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VideoTimeLine createVideoTimeLine()
  {
    VideoTimeLineImpl videoTimeLine = new VideoTimeLineImpl();
    return videoTimeLine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TextArea createTextArea()
  {
    TextAreaImpl textArea = new TextAreaImpl();
    return textArea;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartingMoment createStartingMoment()
  {
    StartingMomentImpl startingMoment = new StartingMomentImpl();
    return startingMoment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Animation createAnimation()
  {
    AnimationImpl animation = new AnimationImpl();
    return animation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Subtitle createSubtitle()
  {
    SubtitleImpl subtitle = new SubtitleImpl();
    return subtitle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Audio createAudio()
  {
    AudioImpl audio = new AudioImpl();
    return audio;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AudioClip createAudioClip()
  {
    AudioClipImpl audioClip = new AudioClipImpl();
    return audioClip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Clip createClip()
  {
    ClipImpl clip = new ClipImpl();
    return clip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Title createTitle()
  {
    TitleImpl title = new TitleImpl();
    return title;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Video createVideo()
  {
    VideoImpl video = new VideoImpl();
    return video;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelativeMoment createRelativeMoment()
  {
    RelativeMomentImpl relativeMoment = new RelativeMomentImpl();
    return relativeMoment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbsoluteMoment createAbsoluteMoment()
  {
    AbsoluteMomentImpl absoluteMoment = new AbsoluteMomentImpl();
    return absoluteMoment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Font createFont()
  {
    FontImpl font = new FontImpl();
    return font;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TextAreaDynamic createTextAreaDynamic()
  {
    TextAreaDynamicImpl textAreaDynamic = new TextAreaDynamicImpl();
    return textAreaDynamic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FadeIn createFadeIn()
  {
    FadeInImpl fadeIn = new FadeInImpl();
    return fadeIn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FadeOut createFadeOut()
  {
    FadeOutImpl fadeOut = new FadeOutImpl();
    return fadeOut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OperationMoment createOperationMomentFromString(EDataType eDataType, String initialValue)
  {
    OperationMoment result = OperationMoment.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOperationMomentToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Moment createMomentFromString(EDataType eDataType, String initialValue)
  {
    Moment result = Moment.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMomentToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color createColorFromString(EDataType eDataType, String initialValue)
  {
    Color result = Color.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertColorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FontStyle createFontStyleFromString(EDataType eDataType, String initialValue)
  {
    FontStyle result = FontStyle.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFontStyleToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VideoMontageSVJDPackage getVideoMontageSVJDPackage()
  {
    return (VideoMontageSVJDPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static VideoMontageSVJDPackage getPackage()
  {
    return VideoMontageSVJDPackage.eINSTANCE;
  }

} //VideoMontageSVJDFactoryImpl
