/*
 * generated by Xtext 2.24.0
 */
package org.xtext.svjd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.svjd.videoMontageSVJD.Movie
import org.xtext.svjd.videoMontageSVJD.VideoElement
import org.xtext.svjd.videoMontageSVJD.Video
import org.xtext.svjd.videoMontageSVJD.Clip
import org.xtext.svjd.videoMontageSVJD.Title
import org.xtext.svjd.videoMontageSVJD.VideoTimeLine

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class VideoMontageSVJDGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var Object root = resource.contents.get(0);
		if (! (root instanceof Movie)) {
			return
		}
		var Movie movie = root as Movie
		fsa.generateFile(movie.title + '.py', compile(movie))
	}
	
	def compile(Movie movie) '''
	# Movie title: «movie.title»
	from moviepy.editor import *
	«FOR VideoElement videoelement : movie.videoelement»
		«declare(videoelement)»
	«ENDFOR»
	
	«declare(movie.videoTimeline)»
	videoListAfterSetStart = []
	timer = 0
	for video in videoTimeLine :
	    videoListAfterSetStart.append(video.set_start(timer))
	    timer += video.duration
	result = CompositeVideoClip(videoListAfterSetStart) # Overlay text on video
	result.write_videofile("«movie.title».mp4",fps=25) # Many options...
	'''
	
	def declare(VideoElement v) '''
		«switch v {
				Video: declare(v as Video)
				Clip: declare(v as Clip)
				Title: declare(v as Title)
			  }»
	'''
	
	def declare(Video video) '''
		video_«video.name» = VideoFileClip("«video.path»")
	'''
	
	def declare(Clip clip) '''
		clip_«clip.name» = video_«clip.video.name».subclip(«clip.startCut»,«clip.endCut»)
	'''
	
	def declare(Title title) '''
		title_«title.name»  =(TextClip("«title.textarea.text»",fontsize=70,color='white',bg_color='black')
		             .set_position('center')
		             .set_duration(10) )
	'''
	
	def declare(VideoTimeLine v) '''
		videoTimeLine = []
		«FOR VideoElement videoelement : v.videos»
			videoTimeLine.append(«getVarNameFromType(videoelement)»)
		«ENDFOR»
	'''
	
	def getVarNameFromType(VideoElement v)'''
		«switch v {
						Video: return 'video_'+v.name
						Clip: return 'clip_'+v.name
						Title: return 'title_'+v.name
					  }»
	'''
	
	
}
