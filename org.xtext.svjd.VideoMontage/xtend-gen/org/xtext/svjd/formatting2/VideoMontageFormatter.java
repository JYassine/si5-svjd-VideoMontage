/**
 * generated by Xtext 2.21.0
 */
package org.xtext.svjd.formatting2;

import VideoMontage.AudioElement;
import VideoMontage.Movie;
import VideoMontage.StartingMoment;
import VideoMontage.Subtitle;
import VideoMontage.TextArea;
import VideoMontage.VideoElement;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.svjd.services.VideoMontageGrammarAccess;

@SuppressWarnings("all")
public class VideoMontageFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private VideoMontageGrammarAccess _videoMontageGrammarAccess;
  
  protected void _format(final Movie movie, @Extension final IFormattableDocument document) {
    EList<AudioElement> _audioelement = movie.getAudioelement();
    for (final AudioElement audioElement : _audioelement) {
      document.<AudioElement>format(audioElement);
    }
    EList<VideoElement> _videoelement = movie.getVideoelement();
    for (final VideoElement videoElement : _videoelement) {
      document.<VideoElement>format(videoElement);
    }
    EList<Subtitle> _subtitle = movie.getSubtitle();
    for (final Subtitle subtitle : _subtitle) {
      document.<Subtitle>format(subtitle);
    }
  }
  
  protected void _format(final Subtitle subtitle, @Extension final IFormattableDocument document) {
    document.<TextArea>format(subtitle.getTextarea());
    document.<StartingMoment>format(subtitle.getStartingmoment());
  }
  
  public void format(final Object subtitle, final IFormattableDocument document) {
    if (subtitle instanceof XtextResource) {
      _format((XtextResource)subtitle, document);
      return;
    } else if (subtitle instanceof Subtitle) {
      _format((Subtitle)subtitle, document);
      return;
    } else if (subtitle instanceof Movie) {
      _format((Movie)subtitle, document);
      return;
    } else if (subtitle instanceof EObject) {
      _format((EObject)subtitle, document);
      return;
    } else if (subtitle == null) {
      _format((Void)null, document);
      return;
    } else if (subtitle != null) {
      _format(subtitle, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(subtitle, document).toString());
    }
  }
}
