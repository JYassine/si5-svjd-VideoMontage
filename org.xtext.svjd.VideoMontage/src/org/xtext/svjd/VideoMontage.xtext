// automatically generated by Xtext
grammar org.xtext.svjd.VideoMontage with org.eclipse.xtext.common.Terminals

import  "fr.uns.polytech.al.VideoMontage" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Movie returns Movie:
	'Movie'
	'{'
		('title' title=EString)?
		'audioelement' '{' audioelement+=AudioElement ( "," audioelement+=AudioElement)* '}' 
		'videoelement' '{' videoelement+=VideoElement ( "," videoelement+=VideoElement)* '}' 
		'subtitle' '{' subtitle+=Subtitle ( "," subtitle+=Subtitle)* '}' 
	'}';

AudioElement returns AudioElement:
	Audio | AudioClip;

VideoElement returns VideoElement:
	Title | Clip | Video;



TextArea returns TextArea:
	TextArea_Impl | TextAreaDynamic;

StartingMoment returns StartingMoment:
	StartingMoment_Impl | RelativeMoment | AbsoluteMoment;







Animation returns Animation:
	FadeIn | FadeOut;

EString returns ecore::EString:
	STRING | ID;

Subtitle returns Subtitle:
	'Subtitle'
	'{'
		('duration' duration=EDouble)?
		'relativemoment' '{' relativemoment+=RelativeMoment ( "," relativemoment+=RelativeMoment)* '}' 
		'textarea' textarea=TextArea
		'startingmoment' startingmoment=StartingMoment
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

RelativeMoment returns RelativeMoment:
	{RelativeMoment}
	'RelativeMoment'
	'{'
		('moment' moment=Moment)?
		('value' value=EDouble)?
	'}';

Transition returns Transition:
	'Transition'
	'{'
		('duration' duration=EDouble)?
		'audioelement' audioelement=AudioElement
	'}';

StartingMoment_Impl returns StartingMoment:
	{StartingMoment}
	'StartingMoment'
	;

Audio returns Audio:
	'Audio'
	name=EString
	'{'
		('duration' duration=EDouble)?
		('path' path=EString)?
		'relativemoment' '{' relativemoment+=RelativeMoment ( "," relativemoment+=RelativeMoment)* '}' 
		('transition' transition=Transition)?
		'startingmoment' startingmoment=StartingMoment
		'audioclip' audioclip=AudioClip
	'}';

AudioClip returns AudioClip:
	'AudioClip'
	name=EString
	'{'
		('duration' duration=EDouble)?
		('volume' volume=EDouble)?
		('startCut' startCut=EDouble)?
		('endCut' endCut=EDouble)?
		'relativemoment' '{' relativemoment+=RelativeMoment ( "," relativemoment+=RelativeMoment)* '}' 
		('transition' transition=Transition)?
		'startingmoment' startingmoment=StartingMoment
		('audio' '{' audio+=Audio ( "," audio+=Audio)* '}' )?
	'}';

enum Moment returns Moment:
				starting = 'starting' | ending = 'ending';

AbsoluteMoment returns AbsoluteMoment:
	{AbsoluteMoment}
	'AbsoluteMoment'
	'{'
		('time' time=EDouble)?
	'}';

Title returns Title:
	'Title'
	'{'
		('duration' duration=EDouble)?
		('backgroundColor' backgroundColor=Color)?
		'relativemoment' '{' relativemoment+=RelativeMoment ( "," relativemoment+=RelativeMoment)* '}' 
		'textarea' textarea=TextArea
	'}';

Clip returns Clip:
	'Clip'
	name=EString
	'{'
		('duration' duration=EDouble)?
		('startCut' startCut=EString)?
		('endCut' endCut=EString)?
		'relativemoment' '{' relativemoment+=RelativeMoment ( "," relativemoment+=RelativeMoment)* '}' 
		('video' '{' video+=Video ( "," video+=Video)* '}' )?
	'}';

Video returns Video:
	'Video'
	name=EString
	'{'
		('duration' duration=EDouble)?
		('path' path=EString)?
		'relativemoment' '{' relativemoment+=RelativeMoment ( "," relativemoment+=RelativeMoment)* '}' 
		'clip' clip=Clip
	'}';

TextArea_Impl returns TextArea:
	'TextArea'
	'{'
		('x' x=EInt)?
		('y' y=EInt)?
		('width' width=EDouble)?
		('height' height=EDouble)?
		('text' text=EString)?
		'font' font=[Font|EString]
		('animation' '{' animation+=Animation ( "," animation+=Animation)* '}' )?
	'}';

enum Color returns Color:
				BLACK = 'BLACK';

EInt returns ecore::EInt:
	'-'? INT;

Font returns Font:
	{Font}
	'Font'
	name=EString
	'{'
		('length' length=EString)?
	'}';

TextAreaDynamic returns TextAreaDynamic:
	'TextAreaDynamic'
	'{'
		('x' x=EInt)?
		('y' y=EInt)?
		('width' width=EDouble)?
		('height' height=EDouble)?
		('text' text=EString)?
		('textSrc' textSrc=EString)?
		('line' line=EInt)?
		'font' font=[Font|EString]
		('animation' '{' animation+=Animation ( "," animation+=Animation)* '}' )?
	'}';

FadeIn returns FadeIn:
	{FadeIn}
	'FadeIn'
	'{'
		('duration' duration=EDouble)?
	'}';

FadeOut returns FadeOut:
	{FadeOut}
	'FadeOut'
	'{'
		('duration' duration=EDouble)?
	'}';
