/*
 * generated by Xtext 2.21.0
 */
package org.xtext.svjd.serializer;

import VideoMontage.AbsoluteMoment;
import VideoMontage.Audio;
import VideoMontage.AudioClip;
import VideoMontage.Clip;
import VideoMontage.FadeIn;
import VideoMontage.FadeOut;
import VideoMontage.Font;
import VideoMontage.Movie;
import VideoMontage.RelativeMoment;
import VideoMontage.StartingMoment;
import VideoMontage.Subtitle;
import VideoMontage.TextArea;
import VideoMontage.TextAreaDynamic;
import VideoMontage.Title;
import VideoMontage.Transition;
import VideoMontage.Video;
import VideoMontage.VideoMontagePackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.svjd.services.VideoMontageGrammarAccess;

@SuppressWarnings("all")
public class VideoMontageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VideoMontageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == VideoMontagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VideoMontagePackage.ABSOLUTE_MOMENT:
				sequence_AbsoluteMoment(context, (AbsoluteMoment) semanticObject); 
				return; 
			case VideoMontagePackage.AUDIO:
				sequence_Audio(context, (Audio) semanticObject); 
				return; 
			case VideoMontagePackage.AUDIO_CLIP:
				sequence_AudioClip(context, (AudioClip) semanticObject); 
				return; 
			case VideoMontagePackage.CLIP:
				sequence_Clip(context, (Clip) semanticObject); 
				return; 
			case VideoMontagePackage.FADE_IN:
				sequence_FadeIn(context, (FadeIn) semanticObject); 
				return; 
			case VideoMontagePackage.FADE_OUT:
				sequence_FadeOut(context, (FadeOut) semanticObject); 
				return; 
			case VideoMontagePackage.FONT:
				sequence_Font(context, (Font) semanticObject); 
				return; 
			case VideoMontagePackage.MOVIE:
				sequence_Movie(context, (Movie) semanticObject); 
				return; 
			case VideoMontagePackage.RELATIVE_MOMENT:
				sequence_RelativeMoment(context, (RelativeMoment) semanticObject); 
				return; 
			case VideoMontagePackage.STARTING_MOMENT:
				sequence_StartingMoment_Impl(context, (StartingMoment) semanticObject); 
				return; 
			case VideoMontagePackage.SUBTITLE:
				sequence_Subtitle(context, (Subtitle) semanticObject); 
				return; 
			case VideoMontagePackage.TEXT_AREA:
				sequence_TextArea_Impl(context, (TextArea) semanticObject); 
				return; 
			case VideoMontagePackage.TEXT_AREA_DYNAMIC:
				sequence_TextAreaDynamic(context, (TextAreaDynamic) semanticObject); 
				return; 
			case VideoMontagePackage.TITLE:
				sequence_Title(context, (Title) semanticObject); 
				return; 
			case VideoMontagePackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case VideoMontagePackage.VIDEO:
				sequence_Video(context, (Video) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     StartingMoment returns AbsoluteMoment
	 *     AbsoluteMoment returns AbsoluteMoment
	 *
	 * Constraint:
	 *     time=EDouble?
	 */
	protected void sequence_AbsoluteMoment(ISerializationContext context, AbsoluteMoment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AudioElement returns AudioClip
	 *     AudioClip returns AudioClip
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         startingmoment=StartingMoment 
	 *         volume=EDouble? 
	 *         startCut=EDouble 
	 *         endCut=EDouble 
	 *         transition=Transition? 
	 *         audio+=Audio 
	 *         audio+=Audio*
	 *     )
	 */
	protected void sequence_AudioClip(ISerializationContext context, AudioClip semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AudioElement returns Audio
	 *     Audio returns Audio
	 *
	 * Constraint:
	 *     (name=EString startingmoment=StartingMoment path=EString? transition=Transition?)
	 */
	protected void sequence_Audio(ISerializationContext context, Audio semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VideoElement returns Clip
	 *     Clip returns Clip
	 *
	 * Constraint:
	 *     (name=EString startCut=EDouble? endCut=EDouble? (video+=Video video+=Video*)?)
	 */
	protected void sequence_Clip(ISerializationContext context, Clip semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Animation returns FadeIn
	 *     FadeIn returns FadeIn
	 *
	 * Constraint:
	 *     duration=EDouble?
	 */
	protected void sequence_FadeIn(ISerializationContext context, FadeIn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Animation returns FadeOut
	 *     FadeOut returns FadeOut
	 *
	 * Constraint:
	 *     duration=EDouble?
	 */
	protected void sequence_FadeOut(ISerializationContext context, FadeOut semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Font returns Font
	 *
	 * Constraint:
	 *     (fontStyle=FontStyle length=EString)
	 */
	protected void sequence_Font(ISerializationContext context, Font semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VideoMontagePackage.Literals.FONT__FONT_STYLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VideoMontagePackage.Literals.FONT__FONT_STYLE));
			if (transientValues.isValueTransient(semanticObject, VideoMontagePackage.Literals.FONT__LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VideoMontagePackage.Literals.FONT__LENGTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFontAccess().getFontStyleFontStyleEnumRuleCall_1_0(), semanticObject.getFontStyle());
		feeder.accept(grammarAccess.getFontAccess().getLengthEStringParserRuleCall_2_1_0(), semanticObject.getLength());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Movie returns Movie
	 *
	 * Constraint:
	 *     (
	 *         title=EString 
	 *         videoelement+=VideoElement 
	 *         videoelement+=VideoElement* 
	 *         (audioelement+=AudioElement audioelement+=AudioElement*)? 
	 *         (subtitle+=Subtitle subtitle+=Subtitle*)?
	 *     )
	 */
	protected void sequence_Movie(ISerializationContext context, Movie semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StartingMoment returns RelativeMoment
	 *     RelativeMoment returns RelativeMoment
	 *
	 * Constraint:
	 *     (moment=Moment? element=[Element|ID] (operationMoment=OperationMoment value=EDouble)?)
	 */
	protected void sequence_RelativeMoment(ISerializationContext context, RelativeMoment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StartingMoment returns StartingMoment
	 *     StartingMoment_Impl returns StartingMoment
	 *
	 * Constraint:
	 *     {StartingMoment}
	 */
	protected void sequence_StartingMoment_Impl(ISerializationContext context, StartingMoment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Subtitle returns Subtitle
	 *
	 * Constraint:
	 *     (startingmoment=StartingMoment duration=EDouble? textarea=TextArea)
	 */
	protected void sequence_Subtitle(ISerializationContext context, Subtitle semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TextArea returns TextAreaDynamic
	 *     TextAreaDynamic returns TextAreaDynamic
	 *
	 * Constraint:
	 *     (
	 *         x=EInt? 
	 *         y=EInt? 
	 *         width=EDouble? 
	 *         height=EDouble? 
	 *         text=EString? 
	 *         textSrc=EString? 
	 *         line=EInt? 
	 *         font=[Font|EString] 
	 *         (animation+=Animation animation+=Animation*)?
	 *     )
	 */
	protected void sequence_TextAreaDynamic(ISerializationContext context, TextAreaDynamic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TextArea returns TextArea
	 *     TextArea_Impl returns TextArea
	 *
	 * Constraint:
	 *     (
	 *         x=EInt? 
	 *         y=EInt? 
	 *         width=EDouble? 
	 *         height=EDouble? 
	 *         text=EString 
	 *         font=[Font|ID]? 
	 *         (animation+=Animation animation+=Animation*)?
	 *     )
	 */
	protected void sequence_TextArea_Impl(ISerializationContext context, TextArea semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VideoElement returns Title
	 *     Title returns Title
	 *
	 * Constraint:
	 *     (name=EString duration=EDouble? backgroundColor=Color? textarea=TextArea)
	 */
	protected void sequence_Title(ISerializationContext context, Title semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (duration=EDouble? audioelement=AudioElement)
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VideoElement returns Video
	 *     Video returns Video
	 *
	 * Constraint:
	 *     (name=EString path=EString)
	 */
	protected void sequence_Video(ISerializationContext context, Video semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VideoMontagePackage.Literals.VIDEO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VideoMontagePackage.Literals.VIDEO__NAME));
			if (transientValues.isValueTransient(semanticObject, VideoMontagePackage.Literals.VIDEO__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VideoMontagePackage.Literals.VIDEO__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVideoAccess().getNameEStringParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVideoAccess().getPathEStringParserRuleCall_1_1_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
}
